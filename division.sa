; Division between 32bit fix-point numbers
; The location of the radix point of every number is defined by parameters 'point_pos'
; 'point_pos' stands for the length of the dicimal part (i.e. the exponent < 0).
; e.g. point_pos = 1 means the length of the dicimal part of the number is 1.
; e.g. point_pos = 16 ,example = 0x0001.1000 = (decimal)1.5
; For more accurate results, point_pos should be larger.
; Only dsigned for positive numbers.
; Author: Wenzhong Ou, Yu-Ming Tang
; Writen at 15th Dec, 2020.

                .global _division
_division:      .cproc dividend, divisor, pos
                .reg result,index,cnt

                ZERO result
                MVK 1,index
                SHL index,pos,index

                CMPEQ divisor, 0, cnt ;test if divisor == 0
[cnt]           B zero_divisor ;if divisor = 0. Go to branch zero_divisor.

test_two_num:   CMPGT divisor, dividend, cnt ;test if divisor is bigger.

[cnt]           B zero_result ;if divisor > divident, go to zero_result 
                
                ;every thing's fine: dividend>=divisor and divisor != 0
                ;start to shift and minus
main_loop:
                ;ADD divisor_shift, 1, divisor_shift
                SHL index,1,index
                SHL divisor,1,divisor
                CMPLT divisor, dividend, cnt
[cnt]           B main_loop ; if divisor<dividend, continue looping 
                CMPEQ divisor, dividend, cnt ; else, shift enough, record result on this bit.
[cnt]           B no_remain ; if divisor=dividend, not thing remains, goto no_remain.
                
                ;deal with remains
remain_loop:
                SHR index,1,index ; Make sure dividend>divisor
                SHR divisor,1,divisor
                SUB dividend, divisor, dividend
                ;LMBD 1,dividend,shift_left_max_dividend
                ;CMPLT dividend, 0, cnt

;[cnt]          ;ADD dividend, divisor, dividend ;if dividend < 0

                ADD index, result, result ; Add up to result
               	CMPEQ dividend,0,cnt ; no remains anymore
[cnt]			B proc_exit
                CMPEQ index, 0, cnt ; if we are at the right-most bit,
[cnt]           B proc_exit ;if index = 0, go to exit 
[!cnt]          B test_two_num  ;if index != 0, back to test_two_num


no_remain: 
                ADD index, result, result ; Add up to result
                B proc_exit ; To return.

zero_divisor:
                MVK -1, result
                SHRU result, 1, result ; divisor = 0, result should be the largest integer

zero_result:
				CMPEQ dividend,0,cnt ; if dividend is already zero, return.
[cnt]			B proc_exit
                SHR index,1,index
                SHL dividend,1,dividend
                B test_two_num 

proc_exit:   
                .return result
                .endproc
