    .global _imresize
    .global _division
    .global _multiply32
    .global _floor
    .global _ceil
_imresize .cproc piColorData, poColorData, iWidth, iHeight, oWidth, oHeight
    .rega x, ori_x, ori_a, ori_c
    .regb y, ori_y, ori_b, ori_d
    ;.reg iWidth_selfdef, iHeight_selfdef
    .reg ratiow, ratioh
    .reg position1, position2, position3, position4, temp1, temp2
    .reg gray_level1, gray_level2, cntx, cnty
    .rega iColor1, iColor3
    .regb iColor2, iColor4, oColor

    ZERO x
    ZERO y
    .call ratiow = _division(iWidth, oWidth)    ;self-def dataType
    .call ratioh = _division(iHeight, oHeight)  ;self-def dataType

    SHL iWidth, 16, iWidth      ;self-def dataType
    SHL iHeight, 16, iHeight   ;self-def dataType

loop_height:
loop_width:

        ;SHL x, 16, x_selfdef    ;self-def dataType
        ;SHL y, 16, y_selfdef    ;self-def dataType
        SHL x, 16, x    
        SHL y, 16, y    

        .call ori_x = _multiply32(x, ratiow)    ;self-def dataType
        .call ori_y = _multiply32(y, ratioh)    ;self-def dataType
        .call ori_a = _floor(ori_x)    ;self-def dataType
        .call ori_c = _ceil(ori_x)    ;self-def dataType
        .call ori_b = _floor(ori_y)    ;self-def dataType
        .call ori_d = _ceil(ori_y)    ;self-def dataType

        .call temp1 = _multiply32(ori_b, iWidth)    ;self-def dataType
        .call temp2 = _multiply32(ori_d, iWidth)    ;self-def dataType

        ADD ori_a, temp1, position1    ;self-def dataType
        ADD ori_c, temp1, position2    ;self-def dataType
        ADD ori_a, temp2, position3    ;self-def dataType
        ADD ori_c, temp2, position4    ;self-def dataType
        
        SHR position1, 16, position1
        SHR position2, 16, position2
        SHR position3, 16, position3
        SHR position4, 16, position4

        LDB *+piColorData[position1], iColor1
        LDB *+piColorData[position2], iColor2
        LDB *+piColorData[position3], iColor3
        LDB *+piColorData[position4], iColor4

        SUB ori_x, ori_a, temp1         ;self-def dataType
        SUB iColor2, iColor1, temp2
        SHL temp2, 16, temp2            ;self-def dataType
        ;MPY temp1, temp2, temp2
        .call temp2 = _multiply32(temp1, temp2) ;self-def dataType
        SHL iColor1, 16, iColor1        ;self-def dataType
        ADD iColor1, temp2, gray_level1 ;self-def dataType

        SUB iColor4, iColor3, temp2
        SHL temp2, 16, temp2            ;self-def dataType
        ;MPY temp1, temp2, temp2
        .call temp2 = _multiply32(temp1, temp2) ;self-def dataType
        SHL iColor3, 16, iColor3        ;self-def dataType
        ADD iColor3, temp2, gray_level2 ;self-def dataType

        SUB ori_y, ori_b, temp1         ;self-def dataType
        SUB gray_level2, gray_level1, temp2 ;self-def dataType
        ;MPY temp1, temp2, temp2
        .call temp2 = _multiply32(temp1, temp2) ;self-def dataType
        ADD gray_level1, temp2, oColor  ;self-def dataType
        SHR oColor, 16, oColor
 
        SHRU x, 16, x
        SHRU y, 16, y
        MPYU y, oWidth, temp1
        ADD x, temp1, temp2

        STB oColor, *+poColorData[temp2]

        ADD x, 1, x     ;x add 1 first
        CMPEQ x, oWidth, cntx
[!cntx] B loop_width
        ADD y, 1, y     ;y add 1 first
        CMPEQ y, oHeight, cnty
[!cnty] B loop_height

    .endproc
